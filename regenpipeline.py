import re
from typing import List
from uuid import uuid4
import streamlit as st
import asyncio
from imgen import run_image_prediction
from extractors import replace_image_descriptions, replace_text_descriptions, extract_text_descriptions, extract_image_links
from utils.initialize_client import initialize_azure_openai_client


class GraphicElement:  
    def __init__(self, element_type, description, refined = None, content = None):  
        self.id = str(uuid4())  
        self.type = element_type
        self.description = description  
        self.content = content
        self.refined = refined

# NEED TO TWEAK TO FOLLOW IMAGE DESCRIPTION FORMAT
async def gpt_regen_image_desc(previous_description: str, user_refinement: str, target_audience: str, 
                               stylistic_description: str,  content_description: str, format: str) -> str:  
    """  
    Uses GPT to generate a refined description based on the combined input.  
  
    Args:  
        combined_input (str): The combined description from previous and user input.  
  
    Returns:  
        str: The refined image description generated by GPT.  
    """  
    # Initialize Azure OpenAI client (replace with actual initialization)  
    completions_client = initialize_azure_openai_client()  
  
    # Construct the grounded prompt for the OpenAI model  
    grounded_prompt = f"""  
    You are an AI assistant tasked with refining image descriptions while ensuring consistency with the 
    first iteration of an image generated based on the original description.

    Given the original description used to generate the image, the user's request for refinement, 
    and the context for the target audience, stylistic preferences, content description, and format, 
    update the image description. Ensure the regenerated description aligns closely with the first image iteration, 
    only modifying aspects directly related to the user's refinement request.

    Constraints:
    - Retain the core aspects of the image described in the original prompt.
    - Ensure the description remains suitable for the specified target audience: {target_audience}.
    - Maintain the stylistic tone and aesthetic preferences: {stylistic_description}.
    - Adhere to the content description: {content_description}.
    - Ensure the final description follows the desired format: {format}.

    Original Description (used to generate the initial image): {previous_description}
    User's Refinement Request: {user_refinement}

    Generate a refined description that incorporates the user's refinement request without altering aspects 
    not directly related to the input. The description should closely follow the initial image's content and style 
    while respecting the user input.
    """  
  
    # Generate the refined description using GPT  
    response = await asyncio.to_thread(  
        completions_client.chat.completions.create,  
        model="gpt-4o",  
        messages=[{"role": "user", "content": grounded_prompt}]  
    )  
  
    result = response.choices[0].message.content if response.choices else "No description generated."  
  
    return result  

    ## EXAMPLE USAGE
    # combined_input = "A beautiful sunrise over the mountains. User wants to refine it: Add more vibrant colors and a clear sky."  
    # result = gpt_regen_image_desc(combined_input)
    # result = "A beautiful sunrise over the mountains, featuring vibrant hues of orange, pink, and gold spreading across the sky. The clear sky accentuates the stunning color palette, making the scene even more breathtaking."



# NEED TO TWEAK TO INCORPORATE TEXT-RAG
async def gpt_regen_text_desc(previous_text: str, user_refinement: str) -> str:  
    """  
    Uses GPT to generate a refined description based on the combined input.  
  
    Args:  
        combined_input (str): The combined description from previous and user input.  
  
    Returns:  
        str: The refined text description generated by GPT.  
    """  
    # Initialize Azure OpenAI client (replace with actual initialization)  
    completions_client = initialize_azure_openai_client()  

  
    # Construct the grounded prompt for the OpenAI model  
    grounded_prompt = f"""  
    You are an AI assistant tasked with refining text descriptions based on user input.  
    Given the original description and the user's request for refinement, update the text  
    description to best suit the user's input while retaining aspects of the original description  
    that are not relevant to the user's input.  
  
    Original Description: {previous_text}
    User's Refinement Request: {user_refinement}  
  
    Provide a refined text description that incorporates the user's input but does not alter  
    aspects of the original description that are not relevant to the user's input. The description  
    should be concise and specific, within 85 words.  
    
    EXAMPLE FORMAT

    <h2>The Social Impact of Cannabis Use</h2>
<ul>
    <li><strong>Isolation:</strong> Regular cannabis use can sometimes lead to social withdrawal. Users might find themselves spending more time alone, distancing from friends and family.</li>
    <li><strong>Depression:</strong> There is a potential link between frequent cannabis use and increased feelings of depression. This can be due to various factors including changes in brain chemistry and the impact of isolation.</li>
    <li><strong>Social Stigma:</strong> Cannabis users may face judgment or stigma from their peers or society, which can further contribute to feelings of isolation and depression.</li>
    <li><strong>Impact on Relationships:</strong> Cannabis use can strain personal relationships, as changes in behavior and priorities may lead to conflicts or misunderstandings with loved ones.</li>
    <li><strong>Community Engagement:</strong> Conversely, some users might find a sense of community among fellow cannabis enthusiasts, which can mitigate some of the negative social effects.</li>
</ul>

    ONLY return the refined description. 
    
    """  
  
    # Generate the refined description using GPT  
    response = await asyncio.to_thread(  
        completions_client.chat.completions.create,  
        model="gpt-4o",  
        messages=[{"role": "user", "content": grounded_prompt}]  
    )  
  
    result = response.choices[0].message.content if response.choices else "No description generated."  
    return result  


async def regenerate_image(user_input: str, target_audience: str, stylistic_description: str, content_description: str,
                            format: str, element: GraphicElement) -> GraphicElement:
    """
    Regenerates an image based on the previous description and user input.
    
    Args:
        user_input (str): The new user-provided description for the image.
        element (GraphicElement): The original image element to be regenerated.
    
    Returns:
        GraphicElement: A new GraphicElement with a refined description and content.
    """
    previous_description = element.description
    # Combine user input with the previous description
    
  
    regenerated_image_desc = await gpt_regen_image_desc(
        previous_description,
        user_input,
        target_audience=target_audience,
        stylistic_description=stylistic_description,
        content_description=content_description,
        format=format,
    )

    # Create a new element with the updated content
    # description needs to be prev description to be able to replace regenerated image url to html file
    regenerated_element = GraphicElement(
            element_type="image",
            description=previous_description,
            refined=regenerated_image_desc
        )
    await run_image_prediction(regenerated_element)

    return regenerated_element

    # EXAMPLE USAGE
    #   previous_element = GraphicElement(  
    #     element_type="image",  
    #     description="A beautiful sunrise over the mountains.",
    # )  
    # user_input = "Add more vibrant colors and a clear sky."  
    # regenerated_element = await regenerate_image(user_input, previous_element)  

    # New description: A beautiful sunrise over the mountains, featuring vibrant hues of orange, pink, and gold spreading across the sky. The clear sky accentuates the stunning color palette, making the scene even more breathtaking.
    # New Image URL: ['https://replicate.delivery/yhqm/GiofmYlClfrjZ0XCmsqKmRKO0tvWOeOZdJLZQOA3GRNxNTeNB/out-0.webp']

async def regenerate_text(user_input: str, element: GraphicElement) -> GraphicElement:
    """  
    Regenerates text based on the previous text and user input.  
  
    Args:  
        user_input (str): The new user-provided input for the text.  
        element (GraphicElement): The original text element to be regenerated.  
  
    Returns:  
        GraphicElement: A new GraphicElement with refined text.  
    """  
    previous_text = element.description  
  
    # Call GPT to generate refined text  
    refined_text = await gpt_regen_text_desc(
        previous_text,
        user_input
    )  
  
    # Create a new element with the updated content  
    refined_element = GraphicElement(  
        element_type="text",  
        description=previous_text,
        refined=refined_text,
        content=refined_text
    )  
  
    return refined_element  

    ## EXAMPLE USAGE

    # html_content = '''  
    #             <html><body>  
    #             <img src="http://example.com/image1.jpg" alt="[Image: 300x200 - A beautiful sunrise]">  
    #             <img src="http://example.com/image2.png" alt="[Image: 400x300 - A serene mountain]">  
    #             <img src="http://example.com/image3.gif" alt="[Image: 500x400 - A bustling city]">  
    #             </body></html>  
    #         '''

    # result = extract_image_links(html_content)   

    # result = [  
    #     GraphicElement('image', '[Image: 300x200 - A beautiful sunrise]', content="http://example.com/image1.jpg"),  
    #     GraphicElement('image', '[Image: 400x300 - A serene mountain]', content="http://example.com/image2.png"),  
    #     GraphicElement('image', '[Image: 500x400 - A bustling city]', content="http://example.com/image3.gif")  
    # ]  
    
    
    # async def regenerate_questions(combined_input):
#     """
#     Generates a list of questions specifically tailored to drug 
#     preventative education material based on a placeholder 
#     description of content.
#     """

#     # if necessary generate qns based on previous desc and user input
#     # if not necessary (user input is abt writing style or smth)
#     # only alters part of content that users specify 
#     prompt = f"""Generate an adequate list of questions that can be used find relevant \
#             details from knowledge base with drug preventative education material from \
#             the Central Narcotics Bureau of Singapore that can be used to expand on this \
#             placeholder description of a paragraph: \
#             {content_description}. \
#             Only return the questions, each on a new line please.
#             return a maximum of 4 questions.
#             """
    
#     #regular openai api
#     response = await create_openai_completion(prompt)
    
#     content = response.choices[0].message.content
#     questions = content.split('\n')
#     # questions = response.choices[0].text.strip().split('\n')
#     return questions
